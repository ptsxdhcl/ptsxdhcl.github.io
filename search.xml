<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>基础面试题</title>
      <link href="/2018/11/23/ji-chu-mian-shi-ti/"/>
      <url>/2018/11/23/ji-chu-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1，python中的关键字yield有什么作用？"><a href="#1，python中的关键字yield有什么作用？" class="headerlink" title="1，python中的关键字yield有什么作用？"></a>1，python中的关键字yield有什么作用？</h2><pre><code>保存当前运行状态(断点)，然后暂停执行，即将函数挂起。将yield关键字的值作为返回值(迭代器)返回，相当于起到了return的作用，当使用next(),send()函数时让函数从断点处继续执行(唤醒函数)。</code></pre><h2 id="2，这两个参数时什么意思-args-kwargs-我们为什么要使用他们？"><a href="#2，这两个参数时什么意思-args-kwargs-我们为什么要使用他们？" class="headerlink" title="2，这两个参数时什么意思:*args,**kwargs?我们为什么要使用他们？"></a>2，这两个参数时什么意思:*args,**kwargs?我们为什么要使用他们？</h2><pre><code>*args 和 **kwargs通常使用在函数定义里，*args允许函数传入不定量个数的非关键字参数，是不定长参数；**kwargs允许函数传入不定量个数的关键字参数，是不定长关键字参数</code></pre><h2 id="3-python主要的内置数据类型都有哪些？print-dir-‘a’-的输出是什么？"><a href="#3-python主要的内置数据类型都有哪些？print-dir-‘a’-的输出是什么？" class="headerlink" title="3,python主要的内置数据类型都有哪些？print(dir(‘a’))的输出是什么？"></a>3,python主要的内置数据类型都有哪些？print(dir(‘a’))的输出是什么？</h2><pre><code>数值型：整型，浮点型，布尔型，复数字符串型元组列表集合字典print(dir(&#39;a&#39;))的输出是关键字参数[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;]</code></pre><h2 id="4，对比-args-和-kwargs-new和init-is和-的区别"><a href="#4，对比-args-和-kwargs-new和init-is和-的区别" class="headerlink" title="4，对比:*args 和**kwargs,new和init,is和==的区别"></a>4，对比:*args 和**kwargs,<strong>new</strong>和<strong>init</strong>,is和==的区别</h2><pre><code>*args和**kwargs：*args表示另何多个无名参数(不定长参数)，它是一个元组；**kwargs表示关键字参数(不定长关键字参数)，它是一个字典。同时使用两者时，*args参数必须在**kwargs前面。__new__和__init__:__init__是当实例对象创建完成后被调用的，然后设置对象属性的初始值；__new__是在实例创建前被调用，它的任务就是创建实例然后返回该实例，是个静态方法。也就是说，__new__在__init__之前被调用，__new__的返回值(实例)将传递给__init__方法的第一个参数然后__init__给这个实例设置参数。is和==:都是对对象进行比较判断。is也被叫做同一性运算符，判断的是id是否相同；==是python标准操作符中的比较操作符，用来比较判断两个对象的值是否相等</code></pre><h2 id="5，装饰器-staticmethod和-classmethod-property的作用？"><a href="#5，装饰器-staticmethod和-classmethod-property的作用？" class="headerlink" title="5，装饰器@staticmethod和@classmethod,@property的作用？"></a>5，装饰器@staticmethod和@classmethod,@property的作用？</h2><pre><code>@classmethod：类静态方法，与实例方法的区别是没有self参数，并且可以在类不进行实例化的情况下使用；@staticmethod:类方法，与实例化方法的区别在于接收的第一个参数不是self(类实例的指针)，而是cls(当前类的具体类型)；@property:属性方法，将一个类方法转为类属性来使用，只读属性。</code></pre><h2 id="6，说说dict的item-方法和iteritems-方法的不同？"><a href="#6，说说dict的item-方法和iteritems-方法的不同？" class="headerlink" title="6，说说dict的item()方法和iteritems()方法的不同？"></a>6，说说dict的item()方法和iteritems()方法的不同？</h2><pre><code>item():可以将字典的所有键值对组成元组并且以列表的形式返回，因为dict是无序的，所以该返回的所有项也是无序的；iteritems():与items()作用大致相同，不过它的返回值是一个迭代器。</code></pre><h2 id="7，python中的变量作用域-变量查找顺序-？"><a href="#7，python中的变量作用域-变量查找顺序-？" class="headerlink" title="7，python中的变量作用域(变量查找顺序)？"></a>7，python中的变量作用域(变量查找顺序)？</h2><pre><code>变量作用域是LEGB顺序。  1，什么是LEGB？  L:local,函数内部作用域  E:enclosing,函数内部与内嵌函数之间  G:global,全局作用域  B:build-in,内置作用域  2，他们是做什么用的？  在学习python函数时，遇到定义域问题时，我们需要知道python是如何查找的。  3，查找顺序？  python在函数查找分为LEGB，与上面介绍的一样，先查找函数内部，然后是函数内部和嵌入函数之间(函数内部再次定义一个函数)，其次是查找全局变量，最后是内置作用域。</code></pre><h2 id="8，描述python中的进程，线程，协程？"><a href="#8，描述python中的进程，线程，协程？" class="headerlink" title="8，描述python中的进程，线程，协程？"></a>8，描述python中的进程，线程，协程？</h2><pre><code>进程:对于操作系统而已，一个任务就是一个进程，每个进程都有自己的堆栈段，代码段和数据段，以保存状态下接着执行，进程是操作系统资源分配的最小单位。线程:一个进程内部可以同时运行多个子任务，我们把进程的这些子任务叫做线程。进程和线程的区别:(1),进程是系统进行资源分配和调度的一个独立单位，线程是进程的一个实体，是CPU调度和分派的基本单位，它是进程更小的能独立运行的基本单位；(2),一个程序至少一个进程，一个进程至少一个线程；(3),线程的划分尺度小于进程(资源比进程少),使的多线程程序并发高；(4),进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大的提高程序的运行效率；(5),线程不能够独立执行，必须存在在进程中；(6),线程执行开销小，但不利于资源的管理和保护，进程相反。协程:协程又叫做微线程，一种用户态的轻量级线程，协程拥有自己的寄存器上下文和栈。优点：a,无需线程上下文切换的开销，协程避免了无意义的调度，由此可以提高性能。b,无需原子操作锁定及同步开销。c,方便切换控制流，简化编程模型。d,高并发+高拓展性+低成本。缺点: a,无法利用多核资源。b,进行阻塞操作会阻塞掉整个程序。</code></pre><h2 id="9，简单比较一下python，java，javascript，如果您对后两者不熟悉，请和您熟悉的另一种语言比较。（不超过三句话）"><a href="#9，简单比较一下python，java，javascript，如果您对后两者不熟悉，请和您熟悉的另一种语言比较。（不超过三句话）" class="headerlink" title="9，简单比较一下python，java，javascript，如果您对后两者不熟悉，请和您熟悉的另一种语言比较。（不超过三句话）"></a>9，简单比较一下python，java，javascript，如果您对后两者不熟悉，请和您熟悉的另一种语言比较。（不超过三句话）</h2><pre><code>python 既有强类属性又有弱类js   弱类</code></pre><h2 id="10，说明os-sys模块的不同，并列举常用的模块方法？"><a href="#10，说明os-sys模块的不同，并列举常用的模块方法？" class="headerlink" title="10，说明os,sys模块的不同，并列举常用的模块方法？"></a>10，说明os,sys模块的不同，并列举常用的模块方法？</h2><pre><code>os:os模块提供了一种方便的使用操作系统函数的方法，该模块负责程序与操作系统的交互，提供访问操作系统底层的接口；(os.remove:删除文件；os.rename:重命名文件)sys:sys模块可供访问由解释器使用或维护的变量和与解释器进行交互的函数，该模块负责程序与python解释器的交互，用于操作python的运行时的环境。(sys.version:获取python解释程序得版本信息；sys.platform:返回操作系统平台名称)</code></pre><h2 id="11，python中search-和match-的区别？"><a href="#11，python中search-和match-的区别？" class="headerlink" title="11，python中search()和match()的区别？"></a>11，python中search()和match()的区别？</h2><pre><code>两者都是正则表达式里的函数，search()匹配整个字符串，直到找到一个符合的匹配，如果找不到返回None；match()只匹配字符串的开始，如果一开始就不符合规则，返回None；两者都是匹配一次。</code></pre><h2 id="12，python匹配HTML-tag的时候，-lt-gt-和-lt-gt-有什么区别？"><a href="#12，python匹配HTML-tag的时候，-lt-gt-和-lt-gt-有什么区别？" class="headerlink" title="12，python匹配HTML tag的时候，&lt;.*&gt;和&lt;.*?&gt;有什么区别？"></a>12，python匹配HTML tag的时候，&lt;.*&gt;和&lt;.*?&gt;有什么区别？</h2><pre><code>&lt;.*&gt;:贪婪模式；&lt;.*?&gt;:非贪婪模式。贪婪模式与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式是在整个表达式匹配成功的前提下尽可能多的匹配，而非贪婪模式是尽可能少的匹配。非贪婪模式只被部分NFA引擎支持。</code></pre><h2 id="13，python是如何进行内存管理的？"><a href="#13，python是如何进行内存管理的？" class="headerlink" title="13，python是如何进行内存管理的？"></a>13，python是如何进行内存管理的？</h2><pre><code>python内部使用引用计数，来保持追踪内存中的对象，python内部记录了对象有多少个引用，即引用计数，当对象被创建时就创建一个引用计数，当对象不再需要时，这个对象的引用计数为0，它被垃圾回收。</code></pre><h2 id="14，什么是lambda函数，它有什么好处？"><a href="#14，什么是lambda函数，它有什么好处？" class="headerlink" title="14，什么是lambda函数，它有什么好处？"></a>14，什么是lambda函数，它有什么好处？</h2><pre><code>lambda函数是一个可以接收另意多个参数（包括可选参数）并返回单个表达式值的匿名函数。如：lambda x,y:x + y     获取下，y两个参数的和的lambda函数。好处：1、lambda函数比较轻便，即用即删除；2、匿名函数，一般用来给filter，map这样的函数式编程服务；3、作为回调函数，传递给某些应用，比如消息处理。</code></pre><h2 id="15，分别说说cmp-map-filter的作用？"><a href="#15，分别说说cmp-map-filter的作用？" class="headerlink" title="15，分别说说cmp,map,filter的作用？"></a>15，分别说说cmp,map,filter的作用？</h2><pre><code>cmp:比较；cmp(a,b);a&lt;b，返回-1；a&gt;b,返回1；a=b,返回0。map:映射；map(func,iterable);将func作用于iterable每个元素上，返回一个可迭代的对象。filter:过滤器；filter(func,iterable);将func依次作用于iterable的每个元素，如果返回值为true, 保留元素，否则从iterable里面删除,返回一个迭代器。</code></pre><h2 id="16-分别简述一下列表，元组，字典，集合的特点？"><a href="#16-分别简述一下列表，元组，字典，集合的特点？" class="headerlink" title="16,分别简述一下列表，元组，字典，集合的特点？"></a>16,分别简述一下列表，元组，字典，集合的特点？</h2><pre><code>列表：1、用list()函数或者[]创建，元素之间用逗号分隔；2、列表的元素不需要具有相同的类型；3、可以使用索引来访问元素(有序)；4、可以切片。元组：1、可以用tuple()函数或者()创建，元素之间用逗号分隔；2、元组的元素不需要具有相同的类型；3、可以使用索引来访问元素；4、可以切片；5、元素的值不可修改。字典：1、可以使用dict()函数或者{}创建，元素之间用逗号分隔，键和值之间用冒号分隔；2、元素由键（key）和值（value）组成 ；3、键必须是唯一，值可不唯一(无序)；4、通过键(key)访问元素。集合：1、通过set()函数或者{}创建，元素之间用逗号分隔；2、与字典相比少了键；3、不可索引不可切片，应为是无序的；4、不可以有重复元素，常常用作去重操作。</code></pre><h2 id="17-简述装饰器？"><a href="#17-简述装饰器？" class="headerlink" title="17,简述装饰器？"></a>17,简述装饰器？</h2><pre><code>装饰器本质上是一个python函数，它可以让其他函数在不需要任何代码变动的前提下增加额外功能，它的返回值也是一个函数。功能：1、引入日志；2、统计函数执行时间；3、执行函数前预备处理；4、执行函数后清理功能；5、django中用到的权限验证；6、缓存中也用到了。</code></pre><h2 id="18，简述你对迭代器的理解；列表，字典，字符串是可迭代对象还是迭代器？"><a href="#18，简述你对迭代器的理解；列表，字典，字符串是可迭代对象还是迭代器？" class="headerlink" title="18，简述你对迭代器的理解；列表，字典，字符串是可迭代对象还是迭代器？"></a>18，简述你对迭代器的理解；列表，字典，字符串是可迭代对象还是迭代器？</h2><pre><code>1、可迭代对象包含迭代器；2、如果一个对象拥有__iter__方法(返回的是当前对象的迭代器类的实例)，其实可迭代对象；如果一个对象拥有next方法，其实迭代器；3、定义可迭代对象，必须实现__iter__方法；定义迭代器，必须实现next方法(返回迭代的每一步，相当for循环)，如果超出边界会抛出StopIteration异常。所以，列表，字典，字符串都是可迭代对象。</code></pre><h2 id="19，一个编码为GBK的字符串S，要将其转成utf-8编码的字符串，应该如何操作？"><a href="#19，一个编码为GBK的字符串S，要将其转成utf-8编码的字符串，应该如何操作？" class="headerlink" title="19，一个编码为GBK的字符串S，要将其转成utf-8编码的字符串，应该如何操作？"></a>19，一个编码为GBK的字符串S，要将其转成utf-8编码的字符串，应该如何操作？</h2><pre class=" language-python"><code class="language-python">S<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></code></pre><h2 id="20，有一朵28个花瓣的花朵，你和小明轮流摘，每人每次必须任意摘1到4个花瓣，能摘下最后一个花瓣的人获胜。如果你先摘并且想要获胜，你会选择第一次摘掉几个花瓣，原因是什么？"><a href="#20，有一朵28个花瓣的花朵，你和小明轮流摘，每人每次必须任意摘1到4个花瓣，能摘下最后一个花瓣的人获胜。如果你先摘并且想要获胜，你会选择第一次摘掉几个花瓣，原因是什么？" class="headerlink" title="20，有一朵28个花瓣的花朵，你和小明轮流摘，每人每次必须任意摘1到4个花瓣，能摘下最后一个花瓣的人获胜。如果你先摘并且想要获胜，你会选择第一次摘掉几个花瓣，原因是什么？"></a>20，有一朵28个花瓣的花朵，你和小明轮流摘，每人每次必须任意摘1到4个花瓣，能摘下最后一个花瓣的人获胜。如果你先摘并且想要获胜，你会选择第一次摘掉几个花瓣，原因是什么？</h2><pre><code>会先摘掉3个；先手拿3个，其他人后手无论拿1-4其中一个，我只要拿加起来等于5就行（乙1甲4，乙2甲3，乙3甲2，乙4甲1），每次两个人加起来刚好是5的倍数，我一定赢了。(3+5*5=28)</code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web面试题</title>
      <link href="/2018/11/21/web-hou-tai-kuang-jia-mian-shi-ti/"/>
      <url>/2018/11/21/web-hou-tai-kuang-jia-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1，Django、Flask、Tornado的对比"><a href="#1，Django、Flask、Tornado的对比" class="headerlink" title="1，Django、Flask、Tornado的对比"></a>1，Django、Flask、Tornado的对比</h2><pre><code>1,Django走的是大而全的方向，开发效率高。它的MTV框架，自带ORM，admin后台管理，自带的splite数据库和开发测试用的服务器，给开发之提高了超高的开发效率。2，Flask是轻量级的框架，自由，灵活，可拓展性强，核心基于werkzeug WSGI工具和jinja2模板引擎3，Tornado走的是少而精的方向，性能优越。它最出名的是异步非阻塞的设计方式。它的两大核心模块：    a: iostraem:对非阻塞式的socket进行简单的封装    b:ioloop:对I/O多路复用的封装，它实现了一个单例</code></pre>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web</title>
      <link href="/2018/11/21/web-kai-fa-chu-shi-md/"/>
      <url>/2018/11/21/web-kai-fa-chu-shi-md/</url>
      
        <content type="html"><![CDATA[<h1 id="一，Web应用结构及工作原理"><a href="#一，Web应用结构及工作原理" class="headerlink" title="一，Web应用结构及工作原理"></a>一，Web应用结构及工作原理</h1><p><img src="/2018/11/21/web-kai-fa-chu-shi-md/webjg.png" alt="web"></p><h1 id="二，Web框架"><a href="#二，Web框架" class="headerlink" title="二，Web框架"></a>二，Web框架</h1><h2 id="1，什么是框架？"><a href="#1，什么是框架？" class="headerlink" title="1，什么是框架？"></a>1，什么是框架？</h2><p>软件框架就是为实现或完成某种软件开发时,提供了一些基础的软件产品,</p><p>框架的功能类似于<strong>基础设施</strong>,提供并实现<strong>最为基础的软件架构和体系</strong></p><p>通常情况下我们依据框架来实现更为复杂的业务程序开发</p><p>框架就是程序的<strong>骨架</strong></p><h2 id="2，框架的优缺点"><a href="#2，框架的优缺点" class="headerlink" title="2，框架的优缺点"></a>2，框架的优缺点</h2><pre><code>可重用成熟，稳健可扩展性良好选对框架很重要</code></pre><h2 id="3，python中常见的框架"><a href="#3，python中常见的框架" class="headerlink" title="3，python中常见的框架"></a>3，python中常见的框架</h2><p>大包大揽 Django 被官方称之为完美主义者的Web框架。</p><p>力求精简 web.py和Tornado</p><p>新生代微框架 Flask和Bottle</p><h2 id="4，web框架中的一些概念"><a href="#4，web框架中的一些概念" class="headerlink" title="4，web框架中的一些概念"></a>4，web框架中的一些概念</h2><p><strong>MVC</strong></p><ul><li>大部分开发语言中都有MVC框架</li><li>MVC框架的核心思想是：解耦</li><li>降低各功能模块之间的耦合性，方便变更，更容易重构代码，最大程度上实现代码的重用</li><li>m表示model，主要用于对数据库层的封装</li><li>v表示view，用于向用户展示结果</li><li>c表示controller，是核心，用于处理请求、获取数据、返回结果 </li></ul><p><strong>MVT</strong></p><ul><li>Django是一款python的web开发框架</li><li>与MVC有所不同，属于MVT框架</li><li>m表示model，负责与数据库交互</li><li>v表示view，是核心，负责接收请求、获取数据、返回结果</li><li>t表示template，负责呈现内容到浏览器</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django</title>
      <link href="/2018/11/20/django-chu-shi/"/>
      <url>/2018/11/20/django-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h1><h2 id="1，认识Django"><a href="#1，认识Django" class="headerlink" title="1，认识Django"></a>1，认识Django</h2><ul><li>Django是一个高级的Python Web框架，它鼓励快速开发和清洁，务实的设计。</li><li>由经验丰富的开发人员构建，它负责Web开发的许多麻烦，因此您可以专注于编写应用程序，而无需重新创建轮子。</li><li>它是免费的和开源的。</li><li>被官方称之为完美主义者的Web框架。</li><li>Django可以更快地构建更好的Web应用程序并减少代码。</li><li>官方网址：<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">https://www.djangoproject.com/</a></li><li>中文文档:<br><a href="http://python.usyiyi.cn/" target="_blank" rel="noopener">http://python.usyiyi.cn/</a></li></ul><h2 id="2，Django框架的特点："><a href="#2，Django框架的特点：" class="headerlink" title="2，Django框架的特点："></a>2，Django框架的特点：</h2><ul><li>快速开发：Django的宗旨在于帮助开发人员快速从概念到完成应用程序。</li><li>安全可靠：Django认真对待安全性，帮助开发人员避免许多常见的安全错误。</li><li>超可伸缩性: Web上的一些最繁忙的网站利用了Django快速灵活扩展的能力。</li></ul><h2 id="3，Django安装"><a href="#3，Django安装" class="headerlink" title="3，Django安装"></a>3，Django安装</h2><pre><code>在线安装Djangopip install Django检测当前是否安装Django及版本python3 -m django --version</code></pre><h2 id="4-Django的框架的搭建"><a href="#4-Django的框架的搭建" class="headerlink" title="4,Django的框架的搭建"></a>4,Django的框架的搭建</h2><pre><code>django-admin startproject mysite  mysite 是项目的目录名，可以自定义</code></pre><h2 id="4，启动项目"><a href="#4，启动项目" class="headerlink" title="4，启动项目"></a>4，启动项目</h2><pre><code>sudo python3 manage.py runserver</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Linux </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql语句</title>
      <link href="/2018/11/13/sql-yu-ju/"/>
      <url>/2018/11/13/sql-yu-ju/</url>
      
        <content type="html"><![CDATA[<p>这里收集了一些<a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a>和<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">领扣</a>常用的sql语句。。。</p><hr>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
