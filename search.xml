<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>基础面试题</title>
      <link href="/2018/11/23/ji-chu-mian-shi-ti/"/>
      <url>/2018/11/23/ji-chu-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1，python中的关键字yield有什么作用？"><a href="#1，python中的关键字yield有什么作用？" class="headerlink" title="1，python中的关键字yield有什么作用？"></a>1，python中的关键字yield有什么作用？</h2><pre><code>答案：保存当前运行状态(断点)，然后暂停执行，即将函数挂起。将yield关键字的值作为返回值返回，相当于起到了return的作用，当使用next(),send()函数时让函数从断点处继续执行(唤醒函数)。</code></pre><h2 id="2，这两个参数时什么意思-args-kwargs-我们为什么要使用他们？"><a href="#2，这两个参数时什么意思-args-kwargs-我们为什么要使用他们？" class="headerlink" title="2，这两个参数时什么意思:*args,**kwargs?我们为什么要使用他们？"></a>2，这两个参数时什么意思:*args,**kwargs?我们为什么要使用他们？</h2><pre><code>答案：*args 和 **kwargs通常使用在函数定义里，*args允许函数传入不定量个数的非关键字参数，是不定长参数；**kwargs允许函数传入不定量个数的关键字参数，是不定长关键字参数</code></pre><h2 id="3-python主要的内置数据类型都有哪些？print-dir-‘a’-的输出是什么？"><a href="#3-python主要的内置数据类型都有哪些？print-dir-‘a’-的输出是什么？" class="headerlink" title="3,python主要的内置数据类型都有哪些？print(dir(‘a’))的输出是什么？"></a>3,python主要的内置数据类型都有哪些？print(dir(‘a’))的输出是什么？</h2><pre><code>答案：数值型：整型，浮点型，布尔型，复数字符串型元组列表集合字典print(dir(&#39;a&#39;))的输出是关键字参数[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;]</code></pre><h2 id="4，对比-args-和-kwargs-new和init-is和-的区别"><a href="#4，对比-args-和-kwargs-new和init-is和-的区别" class="headerlink" title="4，对比:*args 和**kwargs,new和init,is和==的区别"></a>4，对比:*args 和**kwargs,<strong>new</strong>和<strong>init</strong>,is和==的区别</h2><pre><code>答案：*args和**kwargs：*args表示另何多个无名参数(不定长参数)，它是一个元组；**kwargs表示关键字参数(不定长关键字参数)，它是一个字典。同时使用两者时，*args参数必须在**kwargs前面。__new__和__init__:__init__是当实例对象创建完成后被调用的，然后设置对象属性的初始值；__new__是在实例创建前被调用，它的任务就是创建实例然后返回该实例，是个静态方法。也就是说，__new__在__init__之前被调用，__new__的返回值(实例)将传递给__init__方法的第一个参数然后__init__给这个实例设置参数。is和==:都是对对象进行比较判断。is也被叫做同一性运算符，判断的是id是否相同；==是python标准操作符中的比较操作符，用来比较判断两个对象的值是否相等</code></pre><h2 id="5，装饰器-staticmethod和-classmethod-property的作用？"><a href="#5，装饰器-staticmethod和-classmethod-property的作用？" class="headerlink" title="5，装饰器@staticmethod和@classmethod,@property的作用？"></a>5，装饰器@staticmethod和@classmethod,@property的作用？</h2><pre><code>答案：@classmethod：类静态方法，与实例方法的区别是没有self参数，并且可以在类不进行实例化的情况下使用；@staticmethod:类方法，与实例化方法的区别在于接收的第一个参数不是self(类实例的指针)，而是cls(当前类的具体类型)；@property:属性方法，将一个类方法转为类属性来使用，只读属性。</code></pre>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web面试题</title>
      <link href="/2018/11/21/web-hou-tai-kuang-jia-mian-shi-ti/"/>
      <url>/2018/11/21/web-hou-tai-kuang-jia-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1，Django、Flask、Tornado的对比"><a href="#1，Django、Flask、Tornado的对比" class="headerlink" title="1，Django、Flask、Tornado的对比"></a>1，Django、Flask、Tornado的对比</h2><pre><code>1,Django走的是大而全的方向，开发效率高。它的MTV框架，自带ORM，admin后台管理，自带的splite数据库和开发测试用的服务器，给开发之提高了超高的开发效率。2，Flask是轻量级的框架，自由，灵活，可拓展性强，核心基于werkzeug WSGI工具和jinja2模板引擎3，Tornado走的是少而精的方向，性能优越。它最出名的是异步非阻塞的设计方式。它的两大核心模块：    a: iostraem:对非阻塞式的socket进行简单的封装    b:ioloop:对I/O多路复用的封装，它实现了一个单例</code></pre>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web</title>
      <link href="/2018/11/21/web-kai-fa-chu-shi-md/"/>
      <url>/2018/11/21/web-kai-fa-chu-shi-md/</url>
      
        <content type="html"><![CDATA[<h1 id="一，Web应用结构及工作原理"><a href="#一，Web应用结构及工作原理" class="headerlink" title="一，Web应用结构及工作原理"></a>一，Web应用结构及工作原理</h1><p><img src="/2018/11/21/web-kai-fa-chu-shi-md/webjg.png" alt="web"></p><h1 id="二，Web框架"><a href="#二，Web框架" class="headerlink" title="二，Web框架"></a>二，Web框架</h1><h2 id="1，什么是框架？"><a href="#1，什么是框架？" class="headerlink" title="1，什么是框架？"></a>1，什么是框架？</h2><p>软件框架就是为实现或完成某种软件开发时,提供了一些基础的软件产品,</p><p>框架的功能类似于<strong>基础设施</strong>,提供并实现<strong>最为基础的软件架构和体系</strong></p><p>通常情况下我们依据框架来实现更为复杂的业务程序开发</p><p>框架就是程序的<strong>骨架</strong></p><h2 id="2，框架的优缺点"><a href="#2，框架的优缺点" class="headerlink" title="2，框架的优缺点"></a>2，框架的优缺点</h2><pre><code>可重用成熟，稳健可扩展性良好选对框架很重要</code></pre><h2 id="3，python中常见的框架"><a href="#3，python中常见的框架" class="headerlink" title="3，python中常见的框架"></a>3，python中常见的框架</h2><p>大包大揽 Django 被官方称之为完美主义者的Web框架。</p><p>力求精简 web.py和Tornado</p><p>新生代微框架 Flask和Bottle</p><h2 id="4，web框架中的一些概念"><a href="#4，web框架中的一些概念" class="headerlink" title="4，web框架中的一些概念"></a>4，web框架中的一些概念</h2><p><strong>MVC</strong></p><ul><li>大部分开发语言中都有MVC框架</li><li>MVC框架的核心思想是：解耦</li><li>降低各功能模块之间的耦合性，方便变更，更容易重构代码，最大程度上实现代码的重用</li><li>m表示model，主要用于对数据库层的封装</li><li>v表示view，用于向用户展示结果</li><li>c表示controller，是核心，用于处理请求、获取数据、返回结果 </li></ul><p><strong>MVT</strong></p><ul><li>Django是一款python的web开发框架</li><li>与MVC有所不同，属于MVT框架</li><li>m表示model，负责与数据库交互</li><li>v表示view，是核心，负责接收请求、获取数据、返回结果</li><li>t表示template，负责呈现内容到浏览器</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django</title>
      <link href="/2018/11/20/django-chu-shi/"/>
      <url>/2018/11/20/django-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h1><h2 id="1，认识Django"><a href="#1，认识Django" class="headerlink" title="1，认识Django"></a>1，认识Django</h2><ul><li>Django是一个高级的Python Web框架，它鼓励快速开发和清洁，务实的设计。</li><li>由经验丰富的开发人员构建，它负责Web开发的许多麻烦，因此您可以专注于编写应用程序，而无需重新创建轮子。</li><li>它是免费的和开源的。</li><li>被官方称之为完美主义者的Web框架。</li><li>Django可以更快地构建更好的Web应用程序并减少代码。</li><li>官方网址：<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">https://www.djangoproject.com/</a></li><li>中文文档:<br><a href="http://python.usyiyi.cn/" target="_blank" rel="noopener">http://python.usyiyi.cn/</a></li></ul><h2 id="2，Django框架的特点："><a href="#2，Django框架的特点：" class="headerlink" title="2，Django框架的特点："></a>2，Django框架的特点：</h2><ul><li>快速开发：Django的宗旨在于帮助开发人员快速从概念到完成应用程序。</li><li>安全可靠：Django认真对待安全性，帮助开发人员避免许多常见的安全错误。</li><li>超可伸缩性: Web上的一些最繁忙的网站利用了Django快速灵活扩展的能力。</li></ul><h2 id="3，Django安装"><a href="#3，Django安装" class="headerlink" title="3，Django安装"></a>3，Django安装</h2><pre><code>在线安装Djangopip install Django检测当前是否安装Django及版本python3 -m django --version</code></pre><h2 id="4-Django的框架的搭建"><a href="#4-Django的框架的搭建" class="headerlink" title="4,Django的框架的搭建"></a>4,Django的框架的搭建</h2><pre><code>django-admin startproject mysite  mysite 是项目的目录名，可以自定义</code></pre><h2 id="4，启动项目"><a href="#4，启动项目" class="headerlink" title="4，启动项目"></a>4，启动项目</h2><pre><code>sudo python3 manage.py runserver</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Linux </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql语句</title>
      <link href="/2018/11/13/sql-yu-ju/"/>
      <url>/2018/11/13/sql-yu-ju/</url>
      
        <content type="html"><![CDATA[<p>这里收集了一些<a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a>和<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">领扣</a>常用的sql语句。。。</p><hr>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sql </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
